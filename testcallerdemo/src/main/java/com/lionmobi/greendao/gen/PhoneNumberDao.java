package com.lionmobi.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lionmobi.greendao.entry.PhoneNumber;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PHONE_NUMBER".
*/
public class PhoneNumberDao extends AbstractDao<PhoneNumber, Long> {

    public static final String TABLENAME = "PHONE_NUMBER";

    /**
     * Properties of entity PhoneNumber.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Number = new Property(1, int.class, "number", false, "NUMBER");
        public final static Property Phone_id = new Property(2, Integer.class, "phone_id", false, "PHONE_ID");
        public final static Property Block_type = new Property(3, Integer.class, "block_type", false, "BLOCK_TYPE");
        public final static Property Hide_type = new Property(4, Integer.class, "hide_type", false, "HIDE_TYPE");
        public final static Property Update_time = new Property(5, long.class, "update_time", false, "UPDATE_TIME");
        public final static Property User_id = new Property(6, Long.class, "user_id", false, "USER_ID");
        public final static Property User_name = new Property(7, String.class, "user_name", false, "USER_NAME");
        public final static Property Operators = new Property(8, String.class, "operators", false, "OPERATORS");
        public final static Property Country = new Property(9, String.class, "country", false, "COUNTRY");
        public final static Property Provider = new Property(10, String.class, "provider", false, "PROVIDER");
        public final static Property City = new Property(11, String.class, "city", false, "CITY");
        public final static Property Company = new Property(12, String.class, "company", false, "COMPANY");
        public final static Property Indentitied = new Property(13, Boolean.class, "indentitied", false, "INDENTITIED");
    };


    public PhoneNumberDao(DaoConfig config) {
        super(config);
    }
    
    public PhoneNumberDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PHONE_NUMBER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: _id
                "\"NUMBER\" INTEGER NOT NULL ," + // 1: number
                "\"PHONE_ID\" INTEGER," + // 2: phone_id
                "\"BLOCK_TYPE\" INTEGER," + // 3: block_type
                "\"HIDE_TYPE\" INTEGER," + // 4: hide_type
                "\"UPDATE_TIME\" INTEGER NOT NULL ," + // 5: update_time
                "\"USER_ID\" INTEGER," + // 6: user_id
                "\"USER_NAME\" TEXT," + // 7: user_name
                "\"OPERATORS\" TEXT," + // 8: operators
                "\"COUNTRY\" TEXT," + // 9: country
                "\"PROVIDER\" TEXT," + // 10: provider
                "\"CITY\" TEXT," + // 11: city
                "\"COMPANY\" TEXT," + // 12: company
                "\"INDENTITIED\" INTEGER);"); // 13: indentitied
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PHONE_NUMBER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PhoneNumber entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getNumber());
 
        Integer phone_id = entity.getPhone_id();
        if (phone_id != null) {
            stmt.bindLong(3, phone_id);
        }
 
        Integer block_type = entity.getBlock_type();
        if (block_type != null) {
            stmt.bindLong(4, block_type);
        }
 
        Integer hide_type = entity.getHide_type();
        if (hide_type != null) {
            stmt.bindLong(5, hide_type);
        }
        stmt.bindLong(6, entity.getUpdate_time());
 
        Long user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(7, user_id);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(8, user_name);
        }
 
        String operators = entity.getOperators();
        if (operators != null) {
            stmt.bindString(9, operators);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(10, country);
        }
 
        String provider = entity.getProvider();
        if (provider != null) {
            stmt.bindString(11, provider);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(12, city);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(13, company);
        }
 
        Boolean indentitied = entity.getIndentitied();
        if (indentitied != null) {
            stmt.bindLong(14, indentitied ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PhoneNumber entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getNumber());
 
        Integer phone_id = entity.getPhone_id();
        if (phone_id != null) {
            stmt.bindLong(3, phone_id);
        }
 
        Integer block_type = entity.getBlock_type();
        if (block_type != null) {
            stmt.bindLong(4, block_type);
        }
 
        Integer hide_type = entity.getHide_type();
        if (hide_type != null) {
            stmt.bindLong(5, hide_type);
        }
        stmt.bindLong(6, entity.getUpdate_time());
 
        Long user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(7, user_id);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(8, user_name);
        }
 
        String operators = entity.getOperators();
        if (operators != null) {
            stmt.bindString(9, operators);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(10, country);
        }
 
        String provider = entity.getProvider();
        if (provider != null) {
            stmt.bindString(11, provider);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(12, city);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(13, company);
        }
 
        Boolean indentitied = entity.getIndentitied();
        if (indentitied != null) {
            stmt.bindLong(14, indentitied ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PhoneNumber readEntity(Cursor cursor, int offset) {
        PhoneNumber entity = new PhoneNumber( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getInt(offset + 1), // number
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // phone_id
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // block_type
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // hide_type
            cursor.getLong(offset + 5), // update_time
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // user_id
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // user_name
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // operators
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // country
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // provider
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // city
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // company
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0 // indentitied
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PhoneNumber entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNumber(cursor.getInt(offset + 1));
        entity.setPhone_id(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setBlock_type(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setHide_type(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setUpdate_time(cursor.getLong(offset + 5));
        entity.setUser_id(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setUser_name(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOperators(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCountry(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setProvider(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCity(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCompany(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIndentitied(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PhoneNumber entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PhoneNumber entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
